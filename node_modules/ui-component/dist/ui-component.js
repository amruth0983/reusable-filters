/*!
 * ui-component v2.1.1
 * 
 * Copyright adidas 2017
 * Release date: Monday, Sep 11, 2017
 */
(function webpackUniversalModuleDefinition(root, factory) {
	if(typeof exports === 'object' && typeof module === 'object')
		module.exports = factory(require("lodash"), require("eventemitter3"));
	else if(typeof define === 'function' && define.amd)
		define(["lodash", "eventemitter3"], factory);
	else if(typeof exports === 'object')
		exports["UIC"] = factory(require("lodash"), require("eventemitter3"));
	else
		root["UIC"] = factory(root["_"], root["EventEmitter"]);
})(this, function(__WEBPACK_EXTERNAL_MODULE_2__, __WEBPACK_EXTERNAL_MODULE_3__) {
return /******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId])
/******/ 			return installedModules[moduleId].exports;
/******/
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			exports: {},
/******/ 			id: moduleId,
/******/ 			loaded: false
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.loaded = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "/dist/";
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(0);
/******/ })
/************************************************************************/
/******/ ([
/* 0 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	Object.defineProperty(exports, "__esModule", { value: true });
	var Component_1 = __webpack_require__(1);
	exports.Component = Component_1.Component;
	var Phase_1 = __webpack_require__(5);
	exports.Phase = Phase_1.Phase;
	var State_1 = __webpack_require__(4);
	exports.State = State_1.State;


/***/ },
/* 1 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	Object.defineProperty(exports, "__esModule", { value: true });
	var _ = __webpack_require__(2);
	var EventEmitter = __webpack_require__(3);
	var State_1 = __webpack_require__(4);
	var Phase_1 = __webpack_require__(5);
	/**
	 * Abstract UI Component base implementation.
	 */
	var Component = (function () {
	    /**
	     * @template S
	     * @param {IComponentConfig} config - static configuration.
	     * @param {S?} state - initial state.
	     */
	    function Component(config, state) {
	        this.config = config;
	        this.phase = new Phase_1.Phase();
	        this.state = new State_1.State(state);
	        this.events = new EventEmitter();
	    }
	    Component.prototype.getConfig = function () {
	        return _.cloneDeep(this.config);
	    };
	    Component.prototype.getState = function (path) {
	        return _.cloneDeep(this.state.get(path));
	    };
	    Component.prototype.changeState = function (state, extend) {
	        if (extend === void 0) { extend = true; }
	        if (!this.phase.destroyed) {
	            this.state.set(state, extend);
	            this.render();
	        }
	        return this;
	    };
	    Component.prototype.getPhase = function () {
	        return _.cloneDeep(this.phase.get());
	    };
	    Component.prototype.render = function () {
	        this.phase.rendered = true;
	        return this;
	    };
	    Component.prototype.init = function () {
	        this.phase.initialized = true;
	        return this;
	    };
	    Component.prototype.destroy = function () {
	        this.phase.destroyed = true;
	        this.state.clear();
	    };
	    Component.prototype.on = function (eventName, listener) {
	        this.events.addListener(eventName, listener);
	        return this;
	    };
	    Component.prototype.off = function (eventName, listener) {
	        if (!eventName) {
	            this.events.removeAllListeners();
	        }
	        else if (!listener) {
	            this.events.removeAllListeners(eventName);
	        }
	        else {
	            this.events.removeListener(eventName, listener);
	        }
	        return this;
	    };
	    Component.prototype.fire = function (eventName, data) {
	        this.events.emit(eventName, data);
	        return this;
	    };
	    return Component;
	}());
	exports.Component = Component;


/***/ },
/* 2 */
/***/ function(module, exports) {

	module.exports = __WEBPACK_EXTERNAL_MODULE_2__;

/***/ },
/* 3 */
/***/ function(module, exports) {

	module.exports = __WEBPACK_EXTERNAL_MODULE_3__;

/***/ },
/* 4 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	Object.defineProperty(exports, "__esModule", { value: true });
	var _ = __webpack_require__(2);
	/**
	 * Component State Storage
	 */
	var State = (function () {
	    /**
	     * @template S
	     * @param {S?} [initialState=null] - initial state.
	     */
	    function State(initialState) {
	        if (initialState === void 0) { initialState = null; }
	        this.state = initialState;
	    }
	    State.prototype.clear = function () {
	        this.state = null;
	        return this;
	    };
	    State.prototype.get = function (path) {
	        return path ? _.get(this.state, path) : this.state;
	    };
	    State.prototype.set = function (value, extend, path) {
	        if (extend === void 0) { extend = true; }
	        if (path) {
	            _.set(this.state, path, extend ? _.extend({}, _.get(this.state, path), value) : value);
	        }
	        else {
	            if (extend) {
	                this.state = _.extend({}, this.state, value);
	            }
	            else {
	                this.state = value;
	            }
	        }
	        return this;
	    };
	    return State;
	}());
	exports.State = State;


/***/ },
/* 5 */
/***/ function(module, exports) {

	"use strict";
	Object.defineProperty(exports, "__esModule", { value: true });
	/**
	 * Component Phase Control
	 */
	var Phase = (function () {
	    function Phase() {
	        this._rendered = false;
	        this._initialized = false;
	        this._destroyed = false;
	    }
	    Object.defineProperty(Phase.prototype, "rendered", {
	        get: function () {
	            return this._rendered;
	        },
	        /**
	         * @param {boolean} value - value to set.
	         * @throws {Error} if false value is attempted to assign.
	         */
	        set: function (value) {
	            if (value) {
	                this._destroyed = false;
	                this._rendered = value;
	            }
	            else {
	                throw new Error('Cannot assign false to rendered, please use destroyed');
	            }
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(Phase.prototype, "initialized", {
	        get: function () {
	            return this._initialized;
	        },
	        /**
	         * @inheritDoc
	         * @param {boolean} value - value to set.
	         * @throws {Error} if false value is attempted to assign.
	         */
	        set: function (value) {
	            if (value) {
	                this._destroyed = false;
	                this._initialized = value;
	            }
	            else {
	                throw new Error('Cannot assign false to initialized, please use destroyed');
	            }
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(Phase.prototype, "destroyed", {
	        get: function () {
	            return this._destroyed;
	        },
	        /**
	         * @inheritDoc
	         * @param {boolean} value - value to set.
	         * @throws {Error} if false value is attempted to assign.
	         */
	        set: function (value) {
	            if (value) {
	                this._rendered = false;
	                this._initialized = false;
	                this._destroyed = value;
	            }
	            else {
	                throw new Error('Cannot assign false to destroyed, please use rendered or initialized');
	            }
	        },
	        enumerable: true,
	        configurable: true
	    });
	    /**
	     * Retrieve current component phase.
	     * @returns {IComponentPhase} current phase.
	     */
	    Phase.prototype.get = function () {
	        return {
	            rendered: this._rendered,
	            initialized: this._initialized,
	            destroyed: this._destroyed
	        };
	    };
	    return Phase;
	}());
	exports.Phase = Phase;


/***/ }
/******/ ])
});
;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,